name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v4

      # Backend tests
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"
          cache: true
          cache-dependency-path: bugtracker-backend/go.sum

      - name: Test backend
        working-directory: ./bugtracker-backend
        run: |
          go test -json -coverprofile=coverage.out -covermode=atomic ./... > test-results.json
          go tool cover -func=coverage.out > coverage.txt

      - name: Generate backend test report
        uses: guyarb/golang-test-annotations@v0.7.0
        if: always()
        with:
          test-results: bugtracker-backend/test-results.json
          package-name: bugtracker-backend

      # Frontend tests
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: bugtracker-frontend/package-lock.json

      - name: Test frontend
        working-directory: ./bugtracker-frontend
        run: npm ci && npm test

      - name: Publish frontend test results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Frontend Tests
          path: bugtracker-frontend/test-results.xml
          reporter: jest-junit

  api-tests:
    needs: unit-tests
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:v1.50.0-jammy
    permissions:
      contents: read
      checks: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v4

      # Start backend server
      - name: Start backend server
        run: |
          apt-get update && apt-get install -y golang-go
          cd bugtracker-backend
          nohup go run cmd/bugtracker/main.go > server.log 2>&1 &
          cd ../tests-api
          npx wait-port http://localhost:8080/api/health -t 30000

      # Run API tests
      - name: Run API tests
        working-directory: ./tests-api
        run: |
          npm ci
          npm test

      # Upload test results
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: api-test-results
          path: ./tests-api/test-results/
          retention-days: 30

      # Configure Git for container
      - name: Configure Git
        run: git config --global --add safe.directory /__w/bug-tracker/bug-tracker

      # Publish test results
      - name: Publish API test results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: API Tests
          path: ./tests-api/test-results/*.xml
          reporter: jest-junit

  integration-tests:
    needs: unit-tests # This ensures integration tests also wait for unit tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v4

      # Use GitHub's Docker Compose setup action
      - name: Set up Docker Compose
        uses: ndeloof/install-compose-action@v0.0.1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Run tests with proper error handling
      - name: Run integration tests
        run: |
          docker-compose up --build --abort-on-container-exit tests || true
          # Capture exit code before docker-compose down
          EXIT_CODE=$(docker-compose ps -q tests | xargs -r docker inspect -f '{{ .State.ExitCode }}')
          # Store exit code since it will be lost after down
          echo $EXIT_CODE > .exit_code
          docker-compose down
          # Read stored exit code
          if [ "$(cat .exit_code)" != "0" ]; then
            exit $(cat .exit_code)
          fi

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: ./tests/playwright-report/
          retention-days: 30

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: ./tests/test-results/*.xml
          retention-days: 30

      - name: Publish test results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Integration Tests
          path: ./tests/test-results/*.xml
          reporter: jest-junit

  perf-tests:
    needs: api-tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write
      pull-requests: write
      pages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Start backend server
      - name: Start backend server
        run: |
          apt-get update && apt-get install -y golang-go
          cd bugtracker-backend
          nohup go run cmd/bugtracker/main.go > server.log 2>&1 &
          cd ../tests-api
          npx wait-port http://localhost:8080/api/health -t 30000

      - name: Setup K6
        uses: grafana/setup-k6-action@v1

      - name: Run local k6 test
        uses: grafana/run-k6-action@v1
        with:
          path: tests-perf/script.js

      - name: Upload performance HTML report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-report
          path: tests-perf/perf-results.html
          retention-days: 30
