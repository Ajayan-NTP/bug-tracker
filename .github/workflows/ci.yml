name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4

      # Backend unit tests
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"
          cache: true
          cache-dependency-path: bugtracker-backend/go.sum

      - name: Test backend
        working-directory: ./bugtracker-backend
        run: |
          go test -json -coverprofile=coverage.out -covermode=atomic ./... > test-results.json
          go tool cover -func=coverage.out > coverage.txt

      - name: Generate backend test report
        uses: guyarb/golang-test-annotations@v0.7.0
        if: always()
        with:
          test-results: bugtracker-backend/test-results.json
          package-name: bugtracker-backend

      # Frontend unit tests
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: bugtracker-frontend/package-lock.json

      - name: Test frontend
        working-directory: ./bugtracker-frontend
        run: npm ci && npm test

      - name: Publish frontend test results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Frontend Tests
          path: bugtracker-frontend/test-results.xml
          reporter: jest-junit

  api-e2e-perf-tests:
    needs: unit-tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # (Optional) Print Docker version for debugging
      - name: Check Docker versions
        run: |
          docker --version
          docker compose version

      - name: Launch Application
        run: |
          docker compose up --build -d
          npx wait-port http://localhost:8080/api/health -t 30000
      # Run API tests (from tests-api folder)
      - name: Run API Tests
        working-directory: ./tests-api
        run: |
          npm ci
          npm run test:ci
      # Run Integration (E2E) tests with Playwright from the tests folder.
      # (Here we set environment variables so Playwright uses localhost.)
      - name: Run Integration Tests
        working-directory: ./tests
        env:
          PLAYWRIGHT_TEST_BASE_URL: "http://localhost:3000"
          API_BASE_URL: "http://localhost:8080"
          CI: "1"
        run: |
          npm ci
          npx playwright install 
          npx playwright test integration.spec.ts

      # Shut down the application stack
      - name: Shut Down Application
        run: docker compose down

      # Upload test results
      - name: Upload API test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: api-test-results
          path: ./tests-api/test-results/
          retention-days: 30

      - name: Upload Integration Test Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-report
          path: ./tests/playwright-report/
          retention-days: 30

      # Publish test results
      - name: Publish API test results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: API Tests
          path: ./tests-api/test-results/*.xml
          reporter: jest-junit

  # integration-tests:
  #   needs: unit-tests # This ensures integration tests also wait for unit tests
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: read
  #     checks: write
  #     pull-requests: write

  #   steps:
  #     - uses: actions/checkout@v4

  #     # Use GitHub's Docker Compose setup action
  #     - name: Set up Docker Compose
  #       uses: docker/setup-compose-action@v1

  #     # - name: Set up Docker Buildx
  #     #   uses: docker/setup-buildx-action@v3

  #     # Run tests with proper error handling
  #     - name: Run integration tests
  #       run: |
  #         docker-compose up --build --abort-on-container-exit tests || true
  #         # Capture exit code before docker-compose down
  #         EXIT_CODE=$(docker-compose ps -q tests | xargs -r docker inspect -f '{{ .State.ExitCode }}')
  #         # Store exit code since it will be lost after down
  #         echo $EXIT_CODE > .exit_code
  #         docker-compose down
  #         # Read stored exit code
  #         if [ "$(cat .exit_code)" != "0" ]; then
  #           exit $(cat .exit_code)
  #         fi

  #     - name: Upload Playwright report
  #       if: always()
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: playwright-report
  #         path: ./tests/playwright-report/
  #         retention-days: 30

  #     - name: Upload test results
  #       if: always()
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: test-results
  #         path: ./tests/test-results/*.xml
  #         retention-days: 30

  #     - name: Publish test results
  #       uses: dorny/test-reporter@v1
  #       if: always()
  #       with:
  #         name: Integration Tests
  #         path: ./tests/test-results/*.xml
  #         reporter: jest-junit

  # perf-tests:
  #   needs: api-tests
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: read
  #     checks: write
  #     pull-requests: write
  #     pages: write

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     # Start backend server
  #     - name: Start backend server
  #       run: |
  #         apt-get update && apt-get install -y golang-go
  #         cd bugtracker-backend
  #         nohup go run cmd/bugtracker/main.go > server.log 2>&1 &
  #         cd ../tests-api
  #         npx wait-port http://localhost:8080/api/health -t 30000

  #     - name: Setup K6
  #       uses: grafana/setup-k6-action@v1

  #     - name: Run local k6 test
  #       uses: grafana/run-k6-action@v1
  #       with:
  #         path: tests-perf/script.js
  #         flags: --out json=summary.json

  #     - name: Upload performance HTML report
  #       uses: actions/upload-artifact@v4
  #       if: always()
  #       with:
  #         name: performance-report
  #         path: perf-results.html
  #         retention-days: 30

  #     - name: Upload performance Raw Results
  #       uses: actions/upload-artifact@v4
  #       if: always()
  #       with:
  #         name: performance-raw-results
  #         path: summary.json
  #         retention-days: 30
