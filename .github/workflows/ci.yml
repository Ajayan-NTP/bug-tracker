name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4

      # Setup Go for backend
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"
          cache: true
          cache-dependency-path: bugtracker-backend/go.sum

      # Setup Node.js for frontend
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: |
            bugtracker-frontend/package-lock.json
            tests/package-lock.json

      # Build and test backend
      - name: Build backend
        working-directory: ./bugtracker-backend
        run: |
          go mod download
          go build -v ./...

      # Run backend tests
      - name: Test backend
        working-directory: ./bugtracker-backend
        run: |
          go test -json -coverprofile=coverage.out -covermode=atomic ./... > test-results.json
          go tool cover -func=coverage.out > coverage.txt
          echo "## Go Test Coverage" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          cat coverage.txt >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      # Generate backend test report
      - name: Generate backend test report
        uses: guyarb/golang-test-annotations@v0.7.0
        if: always()
        with:
          test-results: bugtracker-backend/test-results.json
          package-name: bugtracker-backend

      # Build frontend
      - name: Build frontend
        working-directory: ./bugtracker-frontend
        run: |
          npm ci
          npm run build

      # Run frontend tests
      - name: Test frontend
        working-directory: ./bugtracker-frontend
        run: |
          npm test
        env:
          CI: true

      # Publish frontend test results
      - name: Publish frontend test results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Frontend Tests
          path: bugtracker-frontend/test-results.xml
          reporter: jest-junit
          fail-on-error: false

  integration-tests:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      # Setup Go for backend
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"
          cache: true
          cache-dependency-path: bugtracker-backend/go.sum

      # Setup Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: |
            bugtracker-frontend/package-lock.json
            tests/package-lock.json

      # Install dependencies
      - name: Install dependencies
        run: |
          cd bugtracker-frontend && npm ci
          cd ../tests && npm ci

      # Install Playwright browsers
      - name: Install Playwright browsers
        run: cd tests && npx playwright install --with-deps

      # Run integration tests
      - name: Run integration tests
        run: |
          chmod +x ./tests/run-tests.sh
          ./tests/run-tests.sh

      # Upload Playwright report on failure
      - name: Upload Playwright report
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: tests/playwright-report
          retention-days: 30
