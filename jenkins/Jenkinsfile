pipeline {
    agent any

    stages {
        stage('w/o docker') {
            steps {
                sh 'echo "Without docker"'
                sh 'touch container-no.txt'
            }
        }

        stage('Build') {
            agent {
                docker {
                    image 'golang:1.21-alpine'
                    reuseNode true
                }
            }
            steps {
                dir('bugtracker-backend') {
                    sh '''
                        export GOCACHE="$PWD/.cache"
                        mkdir -p "$GOCACHE"
                        pwd
                        ls -la
                        go version
                        go build -o bugtracker-backend cmd/bugtracker/main.go
                        ls -la
                    '''
                }
            }
        }

        stage ('Test') {
            agent {
                docker {
                    image 'golang:1.21-alpine'
                    reuseNode true
                }
            }
            
            steps {
                dir('bugtracker-backend') {
                    sh '''
                        export GOCACHE="$PWD/.cache"
                        mkdir -p "$GOCACHE"
                        
                        # Run tests with JSON output and coverage
                        go test -json -coverprofile=coverage.out -covermode=atomic ./... > test-results.json
                        
                        # Generate coverage report
                        go tool cover -func=coverage.out > coverage.txt
                    '''
                }
            }
            post {
                always {
                    dir('bugtracker-backend') {
                        archiveArtifacts artifacts: '**/test-results.json,**/coverage.out,**/coverage.txt', allowEmptyArchive: true
                    }
                }
            }
        }
    }
}
