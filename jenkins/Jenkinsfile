pipeline {
    agent any

    stages {
        stage('Execute Unit Tests') {
            parallel {
                stage('Unit Tests - Backend') {
                    agent {
                        docker {
                            image 'snakee/golang-junit:1.21'
                            reuseNode true
                            alwaysPull true
                        }
                    }

                    steps {
                        echo "Debug: Current branch is ${env.BRANCH_NAME}"
                        echo "Debug: Git branch is ${env.GIT_BRANCH}"

                        dir('bugtracker-backend') {
                            sh '''
                        export GOCACHE="$PWD/.cache"
                        mkdir -p "$GOCACHE"
                        go build -o bugtracker-backend cmd/bugtracker/main.go

                        go test -v ./... 2>&1 | go-junit-report -set-exit-code > report.xml

                        # Generate coverage report
                        go test -coverprofile=coverage.out -covermode=atomic ./...
                        go tool cover -html=coverage.out -o coverage.html

                        mkdir -p reports
                        mv coverage.html reports/
                        mv report.xml reports/
                    '''
                        }
                    }
                    post {
                        always {
                            junit 'bugtracker-backend/reports/report.xml'
                            publishHTML target: [
                        allowMissing: true,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'bugtracker-backend/reports',
                        reportFiles: 'coverage.html',
                        reportName: 'Coverage Report'
                    ]
                        }
                    }
                }

                stage('Unit Tests - Frontend') {
                    agent {
                        docker {
                            image 'node:20-alpine'
                            reuseNode true
                        }
                    }
                    steps {
                        dir('bugtracker-frontend') {
                            sh 'npm ci'
                            sh 'npm test -- --reporters=default --reporters=jest-junit'
                        }
                    }
                    post {
                        always {
                            junit 'bugtracker-frontend/test-results.xml'
                        }
                    }
                }
            }
        }

        stage('Launch application') {
            agent  {
                docker {
                    image 'docker:27.5.1'
                    reuseNode true
                    args '-v /var/run/docker.sock:/var/run/docker.sock -u 0'
                }
            }
            steps {
                sh 'docker compose up --build -d'
            }
        }

        stage('API tests') {
            agent {
                docker {
                    image 'mcr.microsoft.com/playwright:v1.50.0-jammy'
                    reuseNode true
                    args '-u 0 --network=host'  // Runs container as root, also local network
                }
            }
            steps {
                dir('tests-api') {
                    // Wait for the backend health endpoint to be available
                    sh 'npx wait-port http://localhost:8080/api/health -t 30000'

                    // Install dependencies and run tests
                    sh 'npm ci'
                    sh 'npm run test:ci'
                }
            }

            post {
                always {
                    junit 'tests-api/test-results/results.xml'
                    publishHTML target: [
                        allowMissing: true,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'tests-api/playwright-report',
                        reportFiles: 'index.html',
                        reportName: 'Playwright API Test Report'
                    ]
                }
            }
        }

        stage('E2E Tests') {
            agent {
                docker {
                    image 'mcr.microsoft.com/playwright:v1.50.0-jammy'
                    reuseNode true
                    args '--network=host -u 0'
                }
            }
            environment {
                PLAYWRIGHT_TEST_BASE_URL = 'http://localhost:3000'
                API_BASE_URL = 'http://localhost:8080'
                CI = '1'
            }
            steps {
                dir('tests') {
                    // sh 'npm ci'
                    sh 'npx playwright test integration.spec.ts'
                }
            }
            post {
                always {
                    junit 'tests/test-results/results.xml'
                    publishHTML target: [
                        allowMissing: true,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'tests/playwright-report',
                        reportFiles: 'index.html',
                        reportName: 'Playwright Integration Test Report'
                    ]
                }
            }
        }

        stage('Deploy') {
            when {
                expression {
                    return env.GIT_BRANCH == 'origin/main'
                }
            }
            environment {
                FLY_API_TOKEN = credentials('FLY_API_TOKEN')
                FLYCTL_INSTALL = "${env.WORKSPACE.replaceAll(' ', '')}/.fly"
                PATH = "$FLYCTL_INSTALL/bin:$PATH"
                HOME = "${WORKSPACE}"
            }
            stages {
                stage('Install Flyctl') {
                    steps {
                        sh 'mkdir -p $FLYCTL_INSTALL'
                        sh 'curl -L https://fly.io/install.sh | sh'
                        sh 'flyctl --version'
                    }
                }

                stage('Deploy Backend') {
                    steps {
                        dir('bugtracker-backend') {
                            sh 'flyctl deploy --remote-only'
                        }
                    }
                }

                stage('Deploy Frontend') {
                    steps {
                        dir('bugtracker-frontend') {
                            sh 'flyctl deploy --remote-only'
                        }
                    }
                }
            }
        }
    }
}

